@using PagedList;
@using PagedList.Mvc;
@model IPagedList<Classroom2.Models.Reservation>

@{
    ViewBag.Title = "Index";
}

<h2>Index</h2>
@if (User.Identity.IsAuthenticated)
{
    <p>
        @Html.ActionLink("Create New", "Create")
    </p>
}

@using (Html.BeginForm("Index", "Reservations", FormMethod.Get, new { @class = "form-inline" }))
{
    @Html.TextBox("SearchString", null, new { @class = "form-control", @placeholder = "Course name" }) <input type="submit" value="Filter" class="btn btn-default" />
}

<table class="table">
    <tr>
        <th>
            @Html.ActionLink("Course", "Index", new { sortBy = ViewBag.SortCourseNameParameter, searchString = Request.QueryString["searchString"], page = Request.QueryString["page"] })
        </th>
        <th>
            @Html.ActionLink("Teacher", "Index", new { sortBy = ViewBag.SortTeacherNameParameter, searchString = Request.QueryString["searchString"], page = Request.QueryString["page"] })
        </th>
        <th>
            Start
        </th>
        <th>
            End
        </th>
        <th>
            Class room
        </th>
        <th></th>
    </tr>

@foreach (var item in Model) {
    <tr>
        <td>
            @Html.DisplayFor(modelItem => item.CourseName)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.TeacherName)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.StartTime)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.EndTime)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.ClassroomId)
        </td>
        <td>
            @if (User.Identity.IsAuthenticated)
            {
                @Html.ActionLink("Edit", "Edit", new { id = item.Id })
                @: |
                @Html.ActionLink("Details", "Details", new { id = item.Id })
                @: |
                @Html.ActionLink("Delete", "Delete", new { id = item.Id })
            }
        </td>
    </tr>
}

</table>

@Html.PagedListPager(Model, page => Url.Action("Index", new { page, searchString = Request.QueryString["searchString"], sortBy = Request["sortBy"] }))